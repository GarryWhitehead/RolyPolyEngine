
include ("${RPE_CMAKE_INCLUDE_DIRECTORY}/library.cmake")
include ("${RPE_CMAKE_INCLUDE_DIRECTORY}/targets.cmake")

message("Validation path: ${vulkan-validationlayers_INCLUDE_DIR}")
# create a env source script for vulkan layers setup - to be ran with bash source
set(env_source_path "${CMAKE_BINARY_DIR}/yave_env_setup.sh")
file(WRITE ${env_source_path} "# Generated by the RPE buildsystem. Run with bash `source` to setup the environment.\n")
file(APPEND ${env_source_path} "export VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../res/vulkan/explicit_layer.d\n")
file(APPEND ${env_source_path} "export LD_LIBRARY_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../lib\n")
file(APPEND ${env_source_path} "export VK_INSTANCE_LAYERS=VK_LAYER_LUNARG_api_dump:VK_LAYER_KHRONOS_validation\n")

# Create VMA as a c++ library and use the C interface to avoid linkage errors.
add_library(Vma
    "${vulkan-memory-allocator_INCLUDE_DIRS}/vk_mem_alloc.h"

    "${CMAKE_CURRENT_LIST_DIR}/src/vma/vma_common.h"
    "${CMAKE_CURRENT_LIST_DIR}/src/vma/vma_common.cpp"
)
set_target_properties(Vma PROPERTIES CXX_STANDARD 17)
set_target_properties(Vma PROPERTIES LINKER_LANGUAGE CXX)
target_include_directories(Vma PUBLIC ${vulkan-memory-allocator_INCLUDE_DIRS})
target_link_libraries(Vma PUBLIC volk::volk)

add_library(VulkanApi STATIC)

target_sources(
    VulkanApi
    PRIVATE
    src/vulkan-api/driver.c
    src/vulkan-api/context.c
    src/vulkan-api/common.c
    src/vulkan-api/swapchain.c
    src/vulkan-api/texture.c
    src/vulkan-api/staging_pool.c
    src/vulkan-api/commands.c
    src/vulkan-api/utility.c
    src/vulkan-api/program_manager.c
    src/vulkan-api/shader.c
    src/vulkan-api/pipeline_cache.c
    src/vulkan-api/pipeline.c
    src/vulkan-api/resource_cache.c
    src/vulkan-api/renderpass.c
    src/vulkan-api/buffer.c
    src/vulkan-api/frame_buffer_cache.c
    src/vulkan-api/descriptor_cache.c
    src/vulkan-api/sampler_cache.c

    src/vulkan-api/driver.h
    src/vulkan-api/context.h
    src/vulkan-api/common.h
    src/vulkan-api/error_codes.h
    src/vulkan-api/swapchain.h
    src/vulkan-api/texture.h
    src/vulkan-api/staging_pool.h
    src/vulkan-api/commands.h
    src/vulkan-api/utility.h
    src/vulkan-api/program_manager.h
    src/vulkan-api/shader.h
    src/vulkan-api/pipeline_cache.h
    src/vulkan-api/pipeline.h
    src/vulkan-api/resource_cache.h
    src/vulkan-api/renderpass.h
    src/vulkan-api/buffer.h
    src/vulkan-api/frame_buffer_cache.h
    src/vulkan-api/descriptor_cache.h
    src/vulkan-api/sampler_cache.h
)

target_sources(
    VulkanApi
    PUBLIC
    src/backend/enums.h
    src/backend/convert_to_vk.c
    src/backend/convert_to_vk.h
    src/backend/objects.h
)

target_include_directories(
    VulkanApi
    PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/src"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/VulkanApi"
    "${RPE_RENDERDOC_ROOT_PATH}/include"
    ${RPE_RENDERDOC_ROOT_PATH}
    PRIVATE
    ${VulkanHeaders_INCLUDE_DIRS}
)

target_compile_definitions(
    VulkanApi
    PRIVATE
    RPE_SHADER_DIRECTORY="${RPE_SHADER_SIPRV_DIRECTORY}"
    VULKAN_VALIDATION_DEBUG=${WITH_VALIDATION_LAYERS}
    RPE_VERBOSE_OUTPUT=${VERBOSE_OUTPUT}
)

set (vulkan_api_libs
    glslang::glslang
    glslang::SPIRV
    log.c::log.c
    vulkan-validationlayers::vulkan-validationlayers
    spirv-cross::spirv-cross
    Vma
    volk::volk
    Threads::Threads
    UtilityLib
)

target_link_libraries(
    VulkanApi
    PUBLIC
    ${vulkan_api_libs}
)

add_dependencies(VulkanApi Shaders)

# add common compiler flags
rpe_add_compiler_flags(TARGET VulkanApi)

# group source and header files
rpe_source_group(
    TARGET VulkanApi
    ROOT_DIR "${RPE_ROOT_DIRECTORY}/vulkan-api/src/"
)

if (WIN32)
    set_property(
        TARGET 
        VulkanApi 
        PROPERTY VS_DEBUGGER_ENVIRONMENT 
        VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../bin\nVK_LOADER_LAYERS_ENABLE=*api_dump,*validation
    )
endif()

if (BUILD_TESTS)

    set (test_srcs
        test/test_main.c
        test/test_program_manager.c
        test/test_shader.c
        test/test_cache.c
    )

    add_executable(VulkanApiTest ${test_srcs})
    target_link_libraries(VulkanApiTest PRIVATE unity::unity VulkanApi)
    set_target_properties(VulkanApiTest PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${RPE_TEST_DIRECTORY})
    set_target_properties(VulkanApiTest PROPERTIES LINKER_LANGUAGE C)
    rpe_add_compiler_flags(TARGET VulkanApiTest)

    add_test(
            NAME VulkanApiTest
            COMMAND VulkanApiTest
            WORKING_DIRECTORY ${RPE_TEST_DIRECTORY}
    )

endif()