
include ("${RPE_CMAKE_INCLUDE_DIRECTORY}/library.cmake")
include ("${RPE_CMAKE_INCLUDE_DIRECTORY}/targets.cmake")

message("Validation path: ${vulkan-validationlayers_INCLUDE_DIR}")
# create a env source script for vulkan layers setup - to be ran with bash source
if (UNIX)
    set(env_source_path "${CMAKE_BINARY_DIR}/yave_env_setup.sh")
    file(WRITE ${env_source_path} "# Generated by the YAVE buildsystem. Run with bash `source` to setup the environment.\n")
    file(APPEND ${env_source_path} "export VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../res/vulkan/explicit_layer.d\n")
    file(APPEND ${env_source_path} "export DYLD_LIBRARY_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../lib\n")
    file(APPEND ${env_source_path} "export VK_INSTANCE_LAYERS=VK_LAYER_LUNARG_api_dump:VK_LAYER_KHRONOS_validation\n")
elseif(WIN32)
    set(env_source_path "${CMAKE_BINARY_DIR}/yave_env_setup.ps1")
    file(WRITE ${env_source_path} "# Generated by the YAVE buildsystem. Run script in powershell to setup the environment.\n")
    file(APPEND ${env_source_path} "Write-Output \"Note: You MUST run powershell with non-adminstrative priveliges for vulkan validation env variables to work.\"\n")
    file(APPEND ${env_source_path} "$env:VK_LAYER_PATH=\"${vulkan-validationlayers_INCLUDE_DIR}\\..\\bin\"\n")
    file(APPEND ${env_source_path} "$env:VK_INSTANCE_LAYERS=\"VK_LAYER_LUNARG_api_dump;VK_LAYER_KHRONOS_validation\"\n")
    file(APPEND ${env_source_path} "$env:VK_LOADER_LAYERS_ENABLE=\"*api_dump,*validation\"\n")
endif()

# this is a bit of a hack to get the shaderc_util include headers which aren't
# installed as part of the conan package for some reason
set(shaderc_util_path 
    "${shaderc_INCLUDE_DIRS}/../../../source/source_subfolder/libshaderc_util/include/libshaderc_util"
)
file(GLOB shaderc_util_headers "${shaderc_util_path}/*.h")
file(COPY ${shaderc_util_headers} DESTINATION "${shaderc_INCLUDE_DIRS}/shaderc_util")

# Create VMA as a c++ library and use the C interface to avoid linkage errors.
add_library(VmaLib
    "${vulkan-memory-allocator_INCLUDE_DIRS}/vk_mem_alloc.h"

    "${CMAKE_CURRENT_LIST_DIR}/src/vma/vma_common.h"
    "${CMAKE_CURRENT_LIST_DIR}/src/vma/vma_common.cpp"
)
set_target_properties(VmaLib PROPERTIES CXX_STANDARD 17)
set_target_properties(VmaLib PROPERTIES LINKER_LANGUAGE CXX)
target_include_directories(VmaLib PUBLIC ${vulkan-memory-allocator_INCLUDE_DIRS})
target_link_libraries(VmaLib PRIVATE Vulkan::Vulkan)

add_library(VulkanApi STATIC)

target_sources(
    VulkanApi
    PRIVATE
    src/vulkan-api/driver.c
    src/vulkan-api/context.c
    src/vulkan-api/common.c
    src/vulkan-api/swapchain.c
    src/vulkan-api/texture.c
    src/vulkan-api/staging_pool.c
    src/vulkan-api/commands.c
    src/vulkan-api/utility.c

    src/vulkan-api/driver.h
    src/vulkan-api/context.h
    src/vulkan-api/common.h
    src/vulkan-api/error_codes.h
    src/vulkan-api/swapchain.h
    src/vulkan-api/texture.h
    src/vulkan-api/staging_pool.h
    src/vulkan-api/commands.h
    src/vulkan-api/utility.h
)

#target_sources(
#    VulkanApi
#    PUBLIC
#    src/backend/convert_to_vk.cpp
#    src/backend/enums.h
#    src/backend/convert_to_vk.h
#    src/backend/convert_to_yave.cpp
#    src/backend/convert_to_yave.h
#)

target_include_directories(
    VulkanApi
    PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/src"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/VulkanApi"
    PRIVATE
    ${VulkanHeaders_INCLUDE_DIRS}
)

target_compile_definitions(
    VulkanApi
    PRIVATE
    YAVE_SHADER_DIRECTORY="${RPE_SHADER_DIRECTORY}"
    VULKAN_VALIDATION_DEBUG=${WITH_VALIDATION_LAYERS}
    YAVE_VERBOSE_OUTPUT=${VERBOSE_OUTPUT}
)

target_link_libraries(
    VulkanApi
    PUBLIC
    shaderc::shaderc
    log.c::log.c
    vulkan-validationlayers::vulkan-validationlayers
    spirv-cross::spirv-cross
    VmaLib
    Vulkan::Vulkan
    UtilityLib
)

# add common compiler flags
rpe_add_compiler_flags(TARGET VulkanApi)

# group source and header files
rpe_source_group(
    TARGET VulkanApi
    ROOT_DIR "${RPE_ROOT_DIRECTORY}/vulkan-api/src/"
)

if (WIN32)
    set_property(
        TARGET 
        VulkanApi 
        PROPERTY VS_DEBUGGER_ENVIRONMENT 
        VK_LAYER_PATH=${vulkan-validationlayers_INCLUDE_DIR}/../bin\nVK_LOADER_LAYERS_ENABLE=*api_dump,*validation
    )
endif()

if (BUILD_TESTS)

    set (test_srcs
        test/test_main.c
    )

    add_executable(VulkanApiTest ${test_srcs})
    target_link_libraries(VulkanApiTest PRIVATE unity::unity VulkanApi)
    set_target_properties(VulkanApiTest PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${RPE_TEST_DIRECTORY})
    set_target_properties(VulkanApiTest PROPERTIES LINKER_LANGUAGE C)

    add_test(
            NAME VulkanApiTest
            COMMAND VulkanApiTest
            WORKING_DIRECTORY ${RPE_TEST_DIRECTORY}
    )

endif()